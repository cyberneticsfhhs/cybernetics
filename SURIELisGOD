//TeleOp code from 2018
/*
Copyright 2018 FIRST Tech Challenge Team 14424

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;

import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * This file contains an example of an iterative (Non-Linear) "OpMode".
 * An OpMode is a 'program' that runs in either the autonomous or the teleop period of an FTC match.
 * The names of OpModes appear on the menu of the FTC Driver Station.
 * When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * Remove a @Disabled the on the next line or two (if present) to add this opmode to the Driver Station OpMode list,
 * or add a @Disabled annotation to prevent this OpMode from being added to the Driver Station
 */
@TeleOp(name = "SELF DESTRUCT SEQUENCE")

public class SURIELisGOD extends OpMode {
    /* Declare OpMode members. */
    private DcMotor leftBackMotor, leftFrontMotor, rightBackMotor, rightFrontMotor;
    private DcMotor liftBot, liftArm, bigNeck;
    private Servo sweeper, markerHold;
    private boolean newMode;
    private int modePressed;
    private ElapsedTime timer;
    private long now;
    private long future;

    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");
        
        //MOTORS
        try{
            leftBackMotor = hardwareMap.get(DcMotor.class,"leftBack");
            leftBackMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        }
        catch(Exception e){
            telemetry.addLine("leftBackMotor is not connected");
            leftBackMotor = null; //means no reference
        }
        
        try{
            leftFrontMotor = hardwareMap.get(DcMotor.class,"leftFront");
            leftFrontMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        }
        catch(Exception e){
            telemetry.addLine("leftFrontMotor is not connected");
            leftFrontMotor = null;
        }
        
        try{
            rightBackMotor = hardwareMap.get(DcMotor.class,"rightBack");
            rightBackMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        }
        catch(Exception e){
            telemetry.addLine("rightBackMotor is not connected");
            rightBackMotor = null;
        }
        
        try{
            rightFrontMotor = hardwareMap.get(DcMotor.class,"rightFront");
            rightFrontMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

            //rightFrontMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        }
        catch(Exception e){
            telemetry.addLine("rightFrontMotor is not connected");
            rightFrontMotor = null;
        }
        
        try{
            liftBot = hardwareMap.get(DcMotor.class,"liftBot");
            liftBot.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        }
        catch(Exception e){
            telemetry.addLine("liftBot is not connected");
            liftBot = null;
        }
        try{
            liftArm = hardwareMap.get(DcMotor.class,"liftArm");
            liftArm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        }
        catch(Exception e){
            telemetry.addLine("liftArm is not connected");
            liftArm = null;
        }
        try {
            bigNeck = hardwareMap.get(DcMotor.class,"bigNeck");
            bigNeck.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        }
        catch(Exception e) {
            telemetry.addLine("bigNeck is not connected");
            bigNeck = null;
        } 
        //SERVOS
        try{
            sweeper = hardwareMap.get(Servo.class, "sweeper");
        }
        catch(Exception e){
            telemetry.addLine("sweeper is not connected"); //shid 
            sweeper = null;
        }
        /*try{
            dustpan = hardwareMap.get(Servo.class, "dustpam");
        }
        catch(Exception e){
            telemetry.addLine("dustpan is not connected");
            dustpan = null;
        }*/
        try{
            markerHold = hardwareMap.get(Servo.class,"marker");
        }
        catch (Exception e){
            telemetry.addLine("markerHold is not connected");
            markerHold = null;
        }
        newMode = true;
        modePressed = 0;
        timer = new ElapsedTime();
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
    }

    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {

    }

    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    @Override
    public void loop() {
        telemetry.addLine("lets get this bad bih started");
        telemetry.addData("encoders: ", leftBackMotor.getCurrentPosition());
        telemetry.addData("encoders: ", rightBackMotor.getCurrentPosition());
        telemetry.addData("encoders: ", leftFrontMotor.getCurrentPosition());
        telemetry.addData("encoders: ", rightFrontMotor.getCurrentPosition());
        telemetry.addData("encoders: ", liftBot.getCurrentPosition());
        
        //telemetry.addData("flapLB: ",flapLB.getPosition());
        //telemetry.addData("flapRB: ",flapRB.getPosition());
        if(leftBackMotor!=null&&leftFrontMotor!=null&&rightFrontMotor!=null&&rightBackMotor!=null) 
            drive();
            
        if(liftBot!=null)
            roboUp();
        
        if(liftArm!=null)
            arm();
            
        if(bigNeck != null)
            moveNeck();
            
        //if(flapRB!=null && flapLB!=null)
        //    flaps();
         
        if(sweeper!=null)
            SWEEPitup();
            
        if(markerHold!=null)
            placeMarker();
        //ENCODER TESTING AREA PLS DO NOT TOUCH    
        /*int rightFrontPos = rightFrontMotor.getCurrentPosition();
        telemetry.addData("encoder position: ", rightFrontPos);*/
        
    }

    /*
     * Code to run ONCE after the driver hits STOP
     */
    @Override
    public void stop() {

    }
    public void drive(){
        float leftPressedY = gamepad1.left_stick_y;
        float leftPressedX = gamepad1.left_stick_x; 
        float rightPressed = gamepad1.right_stick_x;
        double pow = 0.7818181818*leftPressedY;
        double pow1 = 0.7818181818*leftPressedX;
        double pow2 = 0.7818181818*rightPressed;
        double error = .15;

        if(rightPressed > 0)
            turnRight(pow2);
        else if(rightPressed < 0) 
            turnLeft(pow2);
        else if(leftPressedY < 0 && leftPressedX >= -error && leftPressedX <= error)
            driveForward(pow);
        else if(leftPressedY > 0 && leftPressedX >= -error && leftPressedX <= error)
            driveBackward(pow);
        else if(leftPressedX > 0 && leftPressedY >= -error && leftPressedY <= error)
            strafeRight(pow1);
        else if(leftPressedX < 0 && leftPressedY >= -error && leftPressedY <= error)
            strafeLeft(pow1);
        else
            stopDrive();
    }
    public void driveForward(double pow) {
        leftBackMotor.setPower(pow);
        rightFrontMotor.setPower(-pow);
        rightBackMotor.setPower(-pow);
        leftFrontMotor.setPower(pow);
        telemetry.addLine("going forward");
    }
    public void driveBackward(double pow ) {
        leftBackMotor.setPower(pow);
        rightFrontMotor.setPower(-pow);
        rightBackMotor.setPower(-pow);
        leftFrontMotor.setPower(pow); 
        telemetry.addLine("going backwards");
    }
    public void strafeRight(double pow) {
        //left goes out & right goes in
        leftBackMotor.setPower(pow);
        rightFrontMotor.setPower(-pow);
        rightBackMotor.setPower(pow);
        leftFrontMotor.setPower(-pow);
        telemetry.addLine("strafing right");
    }
    public void strafeLeft(double pow) {
        //left goes in & right goes out
        leftBackMotor.setPower(pow);
        leftFrontMotor.setPower(-pow);
        rightFrontMotor.setPower(-pow);
        rightBackMotor.setPower(pow);
        telemetry.addLine("strafing left");
    }
    public void turnRight(double pow) {
        leftBackMotor.setPower(-pow); 
        leftFrontMotor.setPower(-pow);
        rightBackMotor.setPower(-pow);
        rightFrontMotor.setPower(-pow);
        telemetry.addLine("turning right");
    }
    public void turnLeft(double pow) {
        leftBackMotor.setPower(-pow);
        leftFrontMotor.setPower(-pow);
        rightBackMotor.setPower(-pow);
        rightFrontMotor.setPower(-pow);
        telemetry.addLine("turning left");
    }
    public void stopDrive() {
        leftBackMotor.setPower(0);
        leftFrontMotor.setPower(0);
        rightBackMotor.setPower(0);
        rightFrontMotor.setPower(0);
        telemetry.addLine("not running");
    }
    public void roboUp(){
        float rightTriggerPressed = gamepad1.right_trigger;
        float leftTriggerPressed = gamepad1.left_trigger;
        
        if(rightTriggerPressed > 0){
            liftBot.setPower(1);
        }
        else if(leftTriggerPressed > 0){
            liftBot.setPower(-1);
        }
        else{
            liftBot.setPower(0);
        }
        telemetry.addData("trigger pressed", rightTriggerPressed);
        telemetry.addData("trigger pressed", leftTriggerPressed);
    }
    public void moveNeck () {
        boolean bigNeckUp = gamepad1.dpad_up;
        boolean bigNeckDown = gamepad1.dpad_down;
        
        if(bigNeckUp == true)
            bigNeck.setPower(1);
        else if(bigNeckDown == true)
            bigNeck.setPower(-1);
        else
            bigNeck.setPower(0);
    }
    public void arm(){
        boolean armUp = gamepad1.a;
        boolean armDown = gamepad1.b;
        
        if(armUp == true){
            liftArm.setPower(-1);
        }
        else if(armDown == true){
            liftArm.setPower(1);
        }
        else{
            liftArm.setPower(0);
        }
    }
    public void SWEEPitup(){
        boolean sweepPressed = gamepad1.right_bumper;
        boolean releasePressed = gamepad1.left_bumper;
        
        if(sweepPressed == true){
            sweeper.setPosition(1);//shutup                                                                                                                                                                                                                                                                                  
        }
        else if(releasePressed == true){
            sweeper.setPosition(0);
        }
        else{
            sweeper.setPosition(0.5);
        }
    }
    /*public void flaps(){
        boolean flapsUp = gamepad1.dpad_up;
        boolean flapsDown = gamepad1.dpad_down;
        
        if(flapsUp == true){
            flapLB.setPosition(0);
            flapRB.setPosition(1);
            //flapLBValue-=0.01;
            //flapRBValue+=0.01;
        }
        else if(flapsDown == true){
            flapLB.setPosition(0.81);
            flapRB.setPosition(1-.81);
            //flapLBValue+=0.01;
            //flapRBValue-=0.01;
            
        }*/
        //flapLB.setPosition(flapLBValue);
        //flapRB.setPosition(flapRBValue);
        /*if(flapsUp == true){
            flapLB.setPosition(0);
            flapRB.setPosition(1);
        }
        else if(flapsDown == true){
            flapLB.setPosition(1);
            flapRB.setPosition(0);
        }
        else{
            flapLB.setPosition(-1);
            flapRB.setPosition(-1);
        }
    }*/
    public void placeMarker() {
        boolean yPressed = gamepad1.y;
        if(yPressed == true) {
            markerHold.setPosition(1);
        }
    }
}
