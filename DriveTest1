//TeleOp 2018
/*
Copyright 2018 FIRST Tech Challenge Team 14424

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial
portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.Servo;
import java.text.SimpleDateFormat;
import java.util.Date;


/**
 * This file contains an example of an iterative (Non-Linear) "OpMode".
 * An OpMode is a 'program' that runs in either the autonomous or the teleop period of an FTC match.
 * The names of OpModes appear on the menu of the FTC Driver Station.
 * When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * Remove a @Disabled the on the next line or two (if present) to add this opmode to the Driver Station OpMode list,
 * or add a @Disabled annotation to prevent this OpMode from being added to the Driver Station
 */
 

@TeleOp(name = "Souvenir")

public class DriveTest1 extends OpMode {
    /* Declare OpMode members. */
    private DcMotor leftBackMotor, rightBackMotor, leftFrontMotor, rightFrontMotor;
    private Servo servoRightSweeper;
    private Servo servoLeftSweeper;
    private Servo servo3;
    private boolean newMode;
    private int pressed, extendPressed, boxPressed;
    private ElapsedTime timer;
    private long now, extendNow;
    private long future, extendFuture, boxFuture;
    private ElapsedTime extendTimer;
    private DcMotor liftMotor;
    private DcMotor motorExtend;
    private Servo servoBox;
    private ElapsedTime boxTimer;
    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");
        try{
            leftBackMotor = hardwareMap.get(DcMotor.class, "leftBack" );
        }
        catch(Exception e){
            telemetry.addLine("leftBack is not connected");
            leftBackMotor = null;//means no reference
        }
        try{
        rightBackMotor = hardwareMap.get(DcMotor.class, "rightBack" );
        }
        catch(Exception e){
            telemetry.addLine("rightBack is not connected");
            rightBackMotor=null;
        }
        try{
        leftFrontMotor = hardwareMap.get(DcMotor.class, "leftFront");
        }
        catch(Exception e){
            telemetry.addLine("leftFront is not connected");
            leftFrontMotor=null;
        }
        try{
            rightFrontMotor = hardwareMap.get(DcMotor.class, "rightFront");
        }
        catch(Exception e){
            telemetry.addLine("rightFront is not connected");
            rightFrontMotor=null;
        }
        try{
            liftMotor = hardwareMap.get(DcMotor.class, "liftMotor");
        }
        catch(Exception e){
            telemetry.addLine("liftMotor is not connected");
            liftMotor=null;
        }
        
        leftBackMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightBackMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        leftFrontMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightFrontMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        liftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        try{
            servoRightSweeper = hardwareMap.get(Servo.class, "servoRight");
        }
        catch(Exception e){
            telemetry.addLine("servo1 is not connected");
            servoRightSweeper = null;
        }
        try{
            servoLeftSweeper = hardwareMap.get(Servo.class, "servoLeft");
        }
        catch(Exception e){
            telemetry.addLine("servo2 is not connected");
            servoLeftSweeper = null;
        }
        try{
            motorExtend = hardwareMap.get(DcMotor.class, "motorExtend");
        }
        catch(Exception e){
            telemetry.addLine("motorExtend is not connected");
            motorExtend = null;
        }
        try{
            servoBox = hardwareMap.get(Servo.class, "servoBox");
        }
        catch(Exception e){
            telemetry.addLine("servoBox is not connected");
            servoBox = null;
        }
        
        newMode = true;
        pressed = 0;
        now = 0;
        future = 0;
        extendPressed = 0;
        timer = new ElapsedTime();
        extendTimer = new ElapsedTime();
        
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {
        //initial values, set all motors to 0
    }

    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {
        
    }

    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    @Override 
    public void loop() {
        
        toggleModes();
        
        if(leftBackMotor!=null&& leftFrontMotor!=null&&rightFrontMotor!=null&&rightBackMotor!=null)
            drive();
        
        if(newMode)
        {
            if(servoRightSweeper!=null&&servoLeftSweeper!=null&&servoBox!=null&&motorExtend!=null)
                servoNew();
        }
        else{
            if(servoRightSweeper!=null&&servoLeftSweeper!=null&&servoBox!=null&&motorExtend!=null)
                servoOld();
        }
        
        liftArm();
        now = (long)timer.milliseconds();
        extendNow = (long)extendTimer.milliseconds();
        telemetry.addLine("time =" + now);
        telemetry.update();
        
    }
    public void toggleModes()
    {
        boolean yPressed = gamepad1.y;
        
        if(yPressed && newMode&&now>future){
            pressed++;
            newMode = false;
            future = now+500;
        }
        else if(yPressed && !newMode&&now>future){
            newMode = true;
            pressed++;
            future = now+500;
        }
        telemetry.addData("New Mode = ", newMode + " " + pressed);
    }
    public void drive(){ 
        float leftPressedY = gamepad1.left_stick_y;
        float leftPressedX = gamepad1.left_stick_x; 
        float rightPressed = gamepad1.right_stick_x;
        double pow = leftPressedY;
        double pow1 = 0.7818181818*leftPressedX;
        double pow2 = 0.7818181818*rightPressed;
        double error = .15;
        
        
        if(rightPressed < 0)//pressing down turn left
        {
            leftBackMotor.setPower(pow2);
            leftFrontMotor.setPower(-pow2);
            rightBackMotor.setPower(pow2);
            rightFrontMotor.setPower(-pow2);
            telemetry.addLine("turning left");
        }
        else if(rightPressed > 0)//pressing down turn right
        {
            leftBackMotor.setPower(pow2); 
            leftFrontMotor.setPower(-pow2);
            rightBackMotor.setPower(pow2);
            rightFrontMotor.setPower(-pow2);
            telemetry.addLine("turning right");
        }
        else if(leftPressedY < 0 && leftPressedX >= -error && leftPressedX <= error)//pressing up go forward
        {
            leftBackMotor.setPower(-pow);
            rightFrontMotor.setPower(-pow);
            rightBackMotor.setPower(pow);
            leftFrontMotor.setPower(pow);
            telemetry.addLine("going forward");
            
        }
        else if(leftPressedY > 0 && leftPressedX >= -error && leftPressedX <= error)//pressing down move backwards
        {
            leftBackMotor.setPower(-pow);
            rightFrontMotor.setPower(-pow);
            rightBackMotor.setPower(pow);
            leftFrontMotor.setPower(pow); 
            telemetry.addLine("going backwards");
        }
        else if(leftPressedX > 0 && leftPressedY >= -error && leftPressedY <= error)//pressing right strafes right
        {
            //left goes out & right goes in
            leftBackMotor.setPower(-pow1);
            rightFrontMotor.setPower(-pow1);
            rightBackMotor.setPower(-pow1);
            leftFrontMotor.setPower(-pow1);
            telemetry.addLine("strafing right");
        }
        else if(leftPressedX < 0 && leftPressedY >= -error && leftPressedY <= error)//pressing left strafes left
        {
            //left goes in & right goes out
            leftBackMotor.setPower(-pow1);
            leftFrontMotor.setPower(-pow1);
            rightFrontMotor.setPower(-pow1);
            rightBackMotor.setPower(-pow1);
            telemetry.addLine("strafing left");
        }
        else 
        {
            leftFrontMotor.setPower(0);
            rightFrontMotor.setPower(0);
            leftBackMotor.setPower(0);
            rightBackMotor.setPower(0);
            telemetry.addLine("not running");
        }
        //telemetry.addData("Status", " Motors are at full power at the positive direction" );
        
        telemetry.addData("Left Back Pow: ", leftBackMotor.getPower() );
        telemetry.addData("Right Back Pow: ", rightBackMotor.getPower() );
        telemetry.addData("Left Front Pow: ", leftFrontMotor.getPower() );
        telemetry.addData("Right Front Pow: ", rightFrontMotor.getPower() );
        //telemetry.update();
    } 
    public void liftArm()
    {
        boolean dPadUpPressed = gamepad1.dpad_up;
        boolean dPadDownPressed = gamepad1.dpad_down;
        
        if(dPadUpPressed == true)
        {
            liftMotor.setPower(-0.3);
            //servo3.setPosition(0);
        }
        else if(dPadDownPressed == true){
            //servo3.setPosition(1);
            liftMotor.setPower(0.3);
        }
        else{
            liftMotor.setPower(0);
        }
    }
    public void servoOld(){
        boolean rightBumperPressed = gamepad1.right_bumper;
        boolean leftBumperPressed = gamepad1.left_bumper;
        boolean dPadUpPressed = gamepad1.dpad_up;
        boolean dPadDownPressed = gamepad1.dpad_down;
        boolean APressed = gamepad1.a;
        boolean BPressed = gamepad1.b;
        float rightTrigger = gamepad1.right_trigger;
        
        //sweepers
        if(rightBumperPressed == true){
            servoRightSweeper.setPosition(0);
            servoLeftSweeper.setPosition(1);
        }
        else if(leftBumperPressed == true){
            servoRightSweeper.setPosition(1);
            servoLeftSweeper.setPosition(0);
        }
        else{
            servoRightSweeper.setPosition(0.5);
            servoLeftSweeper.setPosition(0.5);
        }
        
        //arm
        if(dPadUpPressed == true)
        {
            liftMotor.setPower(0.1);
            //servo3.setPosition(0);
        }
        else if(dPadDownPressed == true){
            //servo3.setPosition(1);
            liftMotor.setPower(-0.1);

        }
        else
        {
            liftMotor.setPower(0);
            //servo3.setPosition(0.5);
        }
        
        //gear system for arm extension (servo mode)
        /*if(APressed)
            motorExtend.setPosition(0);
        else if(BPressed)
            motorExtend.setPosition(1);
        else
            motorExtend.setPosition(0.5);*/
            
        //trigger
        if(rightTrigger > 0)
            servoBox.setPosition(0.5);//open 
        else
            servoBox.setPosition(0.1);//close 
        
        telemetry.addData("right bumper: ", "" + rightBumperPressed);
        telemetry.addData("left bumper: ", "" + leftBumperPressed);
        telemetry.addData("dPad up: ", "" + dPadUpPressed);
        telemetry.addData("dPad down: ", "" + dPadDownPressed);
        //telemetry.addData("right trigger: ",+rightTrigger);
        //telemetry.update(); 
    }
    public void servoNew(){
        boolean rightBumperPressed = gamepad1.right_bumper;
        boolean leftBumperPressed = gamepad1.left_bumper;
        boolean dPadUpPressed = gamepad1.dpad_up;
        boolean dPadDownPressed = gamepad1.dpad_down;
        boolean aPressed = gamepad1.a;
        boolean xPressed = gamepad1.x;
        //float rightTrigger = gamepad1.right_trigger;
        
        //arm extension
        /*if(aPressed && extendNow > extendFuture)
        {
            extendPressed ++;
            extendFuture = extendNow + 1325;
        }
        if(extendNow<=extendFuture && extendPressed%2==1){
            motorExtend.setPosition(0);
        }
        else if(now<=extendFuture && extendPressed%2==0)
        {
            motorExtend.setPosition(1);
        }
        else{
            motorExtend.setPosition(0.5);
        }*/
        
        //trigger
        /*if(rightTrigger > 0)
            servoBox.setPosition(0.5);//open 
        else
            servoBox.setPosition(0.1);//close */
        
        //sweepers
        if(rightBumperPressed == true){
            servoRightSweeper.setPosition(0);
            servoLeftSweeper.setPosition(1);
        }
        else if(leftBumperPressed == true){
            servoRightSweeper.setPosition(1);
            servoLeftSweeper.setPosition(0);
        }
        else{
            servoRightSweeper.setPosition(0.5);
            servoLeftSweeper.setPosition(0.5);
        }
        //arm
        /*if(dPadUpPressed == true)
        {
            servo3.setPosition(0);
        }
        else if(dPadDownPressed == true){
            servo3.setPosition(1);

        }
        else
        {
            servo3.setPosition(0.5);
        }*/
    }   
    public void driveForward()
    {
        leftBackMotor.setPower(-1);
        rightFrontMotor.setPower(-1);
        rightBackMotor.setPower(1);
        leftFrontMotor.setPower(1);
    }
    public void stopped()
    {
        leftFrontMotor.setPower(0);
        rightFrontMotor.setPower(0);
        leftBackMotor.setPower(0);
        rightBackMotor.setPower(0);
    }
    /*
     * Code to run ONCE after the driver hits STOP
     */
    @Override
    public void stop() {

    }
}
