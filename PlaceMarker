//Autonomous 2018
/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

/**
 * This file contains an example of an iterative (Non-Linear) "OpMode".
 * An OpMode is a 'program' that runs in either the autonomous or the teleop period of an FTC match.
 * The names of OpModes appear on the menu of the FTC Driver Station.
 * When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all iterative OpModes contain.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */
@Autonomous(name="Autonomous PlaceMarkerOnly", group="Iterative Opmode")

public class PlaceMarker extends OpMode
{
    // Declare OpMode members.
    private ElapsedTime timer = new ElapsedTime();
    private DcMotor leftBackMotor, rightBackMotor, leftFrontMotor, rightFrontMotor;
    private DcMotor liftMotor;
    private Servo markerHold;
    private Servo flapLB, flapRB;
    private BoringCamera cam;
    private int posOfY;
    public boolean ididsomething = false;
    public boolean notUsingCamera = true;
    public boolean beforeCamera = true;
    public int step = 1;
    private int turnTicks = 0;
    private boolean iTurned = false,stop = false;
    /*
     * Code to run ONCE when the driver hits INIT
     */
    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");
        try{
            leftBackMotor = hardwareMap.get(DcMotor.class, "leftBack" );
            leftBackMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            leftBackMotor.setDirection(DcMotorSimple.Direction.FORWARD);
        }
        catch(Exception e){
            telemetry.addLine("leftBack is not connected");
            leftBackMotor = null;//means no reference
        }
        try{
            rightBackMotor = hardwareMap.get(DcMotor.class, "rightBack" );
            rightBackMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            rightBackMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        }
        catch(Exception e){
            telemetry.addLine("rightBack is not connected");
            rightBackMotor=null;
        }
        try{
            leftFrontMotor = hardwareMap.get(DcMotor.class, "leftFront");
            leftFrontMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            leftFrontMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        }
        catch(Exception e){
            telemetry.addLine("leftFront is not connected");
            leftFrontMotor=null;
        }
        try{
            rightFrontMotor = hardwareMap.get(DcMotor.class, "rightFront");
            rightFrontMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            rightFrontMotor.setDirection(DcMotorSimple.Direction.FORWARD);
        }
        catch(Exception e){
            telemetry.addLine("rightFront is not connected");
            rightFrontMotor=null;
        }
        try{
            liftMotor = hardwareMap.get(DcMotor.class, "liftBot");
            liftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        }
        catch(Exception e){
            telemetry.addLine("liftBot is not connected");
            liftMotor=null;
        }
        leftBackMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightBackMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        leftFrontMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightFrontMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        
        try{
            markerHold = hardwareMap.get(Servo.class,"markerHold");
        }
        catch (Exception e){
            telemetry.addLine("markerHold is not connected");
            markerHold = null;
        }
        try{
            flapRB = hardwareMap.get(Servo.class, "flapR");
        }
        catch(Exception e){
            telemetry.addLine("flapR is not connected");
            flapRB = null;
        }
        try{
            flapLB = hardwareMap.get(Servo.class,"flapL");
        }
        catch(Exception e){
            telemetry.addLine("flapL is not connected");
            flapLB = null;
        }
        //setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        cam = new BoringCamera(telemetry,hardwareMap);
        cam.activate();
        /*posOfY = -99;
        posOfY = cam.getLocOfYellow();
        telemetry.addData("pos of gold",posOfY);
        telemetry.addLine("Finished init");*/
        
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop()
    {
        telemetry.addData("encoders: ", leftBackMotor.getCurrentPosition());
        telemetry.addData("encoders: ", rightBackMotor.getCurrentPosition());
        telemetry.addData("encoders: ", leftFrontMotor.getCurrentPosition());
        telemetry.addData("encoders: ", rightFrontMotor.getCurrentPosition());
        //setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        telemetry.addData("liftMotor: ", liftMotor.getCurrentPosition());
        
        flapLB.setPosition(0);
        flapRB.setPosition(1);
    }

    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() 
    {
        timer.reset();
        setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
        liftMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        liftMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        turnTicks = 0;
    }
    
    public void printData(){
        boolean centerGold = cam.centerGold();
            telemetry.addData("center gold ",centerGold);
            posOfY = cam.getLocOfYellow();
            telemetry.addData("pos of gold",posOfY);
            
        int distFromC=cam.distBetween();
            telemetry.addData("diet from center",distFromC);
            
            //setMotorMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            //turnLeftPow(0.5);
    }
    
    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    @Override
    public void loop() 
    {
        telemetry.addData("encoders: ", leftBackMotor.getCurrentPosition());
        telemetry.addData("encoders: ", rightBackMotor.getCurrentPosition());
        telemetry.addData("encoders: ", leftFrontMotor.getCurrentPosition());
        telemetry.addData("encoders: ", rightFrontMotor.getCurrentPosition());
        telemetry.addData("encoders: ", liftMotor.getCurrentPosition());
        
       if(stop)
       {
           stopped();
        }
        else if(notUsingCamera){ 
           if(beforeCamera){
                botDown(10269);
                if(!notUsingCamera){
                    strafeLeft(100);
                    driveForward(175);
                    strafeRight(100);
                    setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                    setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
                    notUsingCamera = false;
                }
           }
           else{
               if(!iTurned) {
                  driveForward(700);//play with this number so it ges us to the same place
               }
               else{
                   turnLeft(-turnTicks*2);
                   driveForward(700);//this must match the distance travled forward erarlier
                   turnLeft(turnTicks);
                   driveForward(100); //change
                  // strafeLeft(100);
                   placeMarker();
                   
                   
                   
                   stop = true;
               }
           }
       }
       else { //(!notUsingCamera)
            setMotorMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            
            boolean centerGold = cam.centerGold();
            telemetry.addData("center gold ",centerGold);
            posOfY = cam.getLocOfYellow();
            telemetry.addData("pos of gold",posOfY);
       
            int distFromC = cam.distBetween();
            telemetry.addData("distance from center", distFromC);
                if(centerGold==true && !ididsomething){
                    turnTicks = rightFrontMotor.getCurrentPosition();
                    setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                    setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
                    driveForward(700);
                    telemetry.addLine("centerGold is true");
                    ididsomething = true;
                }
                else {
                    telemetry.addLine("centerGold is false");
                    iTurned = true;
                    if( distFromC < 0 && !ididsomething)
                    {
                        telemetry.addLine("TURNING LEFT pls join my relgion");
                        turnLeftPow(0.17);
                    }                
                    else //if( distFromC > 0 && !ididsomething)
                    {
                        telemetry.addLine("TURNING RIGHT put it in rice");
                        turnRightPow(0.17);
                    }
               
                }
                if(ididsomething){
                    stopped();
                    telemetry.addLine("walid help GOODNIGHT STREAKS");
                    setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                    setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
                    beforeCamera = false;
                    notUsingCamera = true;
                }
        }
    }
    
    //TURNING
    public void turnRightPow(double pow) {
        leftBackMotor.setPower(pow);
        leftFrontMotor.setPower(pow);
        rightBackMotor.setPower(-pow);
        rightFrontMotor.setPower(-pow);
    }
    public void turnLeftPow(double pow) {
            leftBackMotor.setPower(-pow); 
            leftFrontMotor.setPower(-pow);
            rightBackMotor.setPower(pow);
            rightFrontMotor.setPower(pow);
    }
    
    public void turnRight(int encoder) {
        leftBackMotor.setTargetPosition(leftBackMotor.getCurrentPosition() + encoder);
        rightFrontMotor.setTargetPosition(rightBackMotor.getCurrentPosition() - encoder);
        rightBackMotor.setTargetPosition(rightBackMotor.getCurrentPosition() - encoder);
        leftFrontMotor.setTargetPosition(leftBackMotor.getCurrentPosition() + encoder);
        
        while(isMotorBusy()) {
            leftBackMotor.setPower(0.6); 
            leftFrontMotor.setPower(0.6);
            rightBackMotor.setPower(0.6);
            rightFrontMotor.setPower(0.6);
        }
        
        leftBackMotor.setPower(0);
        rightFrontMotor.setPower(0);
        rightBackMotor.setPower(0);
        leftFrontMotor.setPower(0);
        
        setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    public void turnLeft(int encoder) {
        setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
        leftBackMotor.setTargetPosition(leftBackMotor.getCurrentPosition() - encoder);
        rightFrontMotor.setTargetPosition(rightBackMotor.getCurrentPosition() + encoder);
        rightBackMotor.setTargetPosition(rightBackMotor.getCurrentPosition() + encoder);
        leftFrontMotor.setTargetPosition(leftBackMotor.getCurrentPosition() - encoder);
        
        while(isMotorBusy()) {
            leftBackMotor.setPower(0.8); 
            leftFrontMotor.setPower(0.8);
            rightBackMotor.setPower(0.8);
            rightFrontMotor.setPower(0.8);
        }
        
        leftBackMotor.setPower(0);
        rightFrontMotor.setPower(0);
        rightBackMotor.setPower(0);
        leftFrontMotor.setPower(0);
        
        setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    /*
     * Code to run ONCE after the driver hits STOP
     */
    
    //FOWARDS
    public boolean isMotorBusy() {
        return leftBackMotor.isBusy() && rightFrontMotor.isBusy() && rightBackMotor.isBusy() && leftFrontMotor.isBusy();
    }
    public void driveForward(int encoder) {
        leftBackMotor.setTargetPosition(leftBackMotor.getCurrentPosition() + encoder);
        rightFrontMotor.setTargetPosition(rightBackMotor.getCurrentPosition() + encoder);
        rightBackMotor.setTargetPosition(rightBackMotor.getCurrentPosition() + encoder);
        leftFrontMotor.setTargetPosition(leftBackMotor.getCurrentPosition() + encoder);
        
        while(isMotorBusy()) {
            leftBackMotor.setPower(1); //change speed
            rightFrontMotor.setPower(1);
            rightBackMotor.setPower(1);
            leftFrontMotor.setPower(1);
        }
        
        leftBackMotor.setPower(0);
        rightFrontMotor.setPower(0);
        rightBackMotor.setPower(0);
        leftFrontMotor.setPower(0);
        
        setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    //BACKWARDS
    public void driveBackward(int encoder) {
        leftBackMotor.setTargetPosition(leftBackMotor.getCurrentPosition() - encoder);
        rightFrontMotor.setTargetPosition(rightBackMotor.getCurrentPosition() - encoder);
        rightBackMotor.setTargetPosition(rightBackMotor.getCurrentPosition() - encoder);
        leftFrontMotor.setTargetPosition(leftBackMotor.getCurrentPosition() - encoder);
        
        while(isMotorBusy()) {
            leftBackMotor.setPower(1);
            rightFrontMotor.setPower(1);
            rightBackMotor.setPower(1);
            leftFrontMotor.setPower(1);
        }
        leftBackMotor.setPower(0);
        rightFrontMotor.setPower(0);
        rightBackMotor.setPower(0);
        leftFrontMotor.setPower(0);
        
        setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    //STRAFING
    public void strafeRight(int encoder) {
        leftBackMotor.setTargetPosition(leftBackMotor.getCurrentPosition() - encoder);
        rightFrontMotor.setTargetPosition(rightBackMotor.getCurrentPosition() - encoder);
        rightBackMotor.setTargetPosition(rightBackMotor.getCurrentPosition() + encoder);
        leftFrontMotor.setTargetPosition(leftBackMotor.getCurrentPosition() + encoder);
        
        while(isMotorBusy()) {
            //right go inward and left go outward
            leftBackMotor.setPower(1);
            rightFrontMotor.setPower(1);
            rightBackMotor.setPower(1);
            leftFrontMotor.setPower(1);
        }
        leftBackMotor.setPower(0);
        rightFrontMotor.setPower(0);
        rightBackMotor.setPower(0);
        leftFrontMotor.setPower(0);
        
        setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    public void strafeLeft(int encoder) {
        leftBackMotor.setTargetPosition(leftBackMotor.getCurrentPosition() + encoder);
        rightFrontMotor.setTargetPosition(rightBackMotor.getCurrentPosition() + encoder);
        rightBackMotor.setTargetPosition(rightBackMotor.getCurrentPosition() - encoder);
        leftFrontMotor.setTargetPosition(leftBackMotor.getCurrentPosition() - encoder);
        
        while(isMotorBusy()) {
            leftBackMotor.setPower(1);
            rightFrontMotor.setPower(1);
            rightBackMotor.setPower(1);
            leftFrontMotor.setPower(1);
        }
        leftBackMotor.setPower(0);
        rightFrontMotor.setPower(0);
        rightBackMotor.setPower(0);
        leftFrontMotor.setPower(0);
        
        setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    //LATCH
    public boolean isMotorBusy2() {
        return liftMotor.isBusy();
    }
    public void down(int encoder) {
        liftMotor.setTargetPosition(liftMotor.getCurrentPosition() + encoder);
        while(isMotorBusy2()) {
            liftMotor.setPower(0.3);
        }
        liftMotor.setPower(0);
        
        setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
    }
    public void botDown(int encoder){ //prev up
        //liftMotor.setTargetPosition(liftMotor.getCurrentPosition() + encoder);
        if(liftMotor.getCurrentPosition()<encoder)//isMotorBusy2()) 
        {
            liftMotor.setPower(0.3);
        }
        else
        {
            liftMotor.setPower(0);
            notUsingCamera = false;
            //step = 2;
            setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
            setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
        }
    }
    //MARKER
    public void placeMarker(){
        flapLB.setPosition(0.81);
        flapRB.setPosition(1-0.81);
    }
    /*public void liftOut(){
        leftBackMotor.setPower(1); 
        leftFrontMotor.setPower(-1);
        rightBackMotor.setPower(1);
        rightFrontMotor.setPower(-1);
    }
    public void orientate(){
        leftBackMotor.setPower(1);
        leftFrontMotor.setPower(-1);
        rightBackMotor.setPower(1);
        rightFrontMotor.setPower(-1);
    }*/
    public void setMotorMode(DcMotor.RunMode mode) {
        leftBackMotor.setMode(mode);
        rightFrontMotor.setMode(mode);
        rightBackMotor.setMode(mode);
        leftFrontMotor.setMode(mode);
        liftMotor.setMode(mode);
    }
    public void stopped(){
        leftFrontMotor.setPower(0);
        rightFrontMotor.setPower(0);
        leftBackMotor.setPower(0);
        rightBackMotor.setPower(0);
    }
    
    @Override
    public void stop() {
        cam.deactivate();
        setMotorMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        setMotorMode(DcMotor.RunMode.RUN_TO_POSITION);
        stopped();
    }
}
