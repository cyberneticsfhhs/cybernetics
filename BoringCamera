//Camera 2018
package org.firstinspires.ftc.teamcode;

import java.util.ArrayList;
import java.util.List;

import com.qualcomm.robotcore.hardware.HardwareMap;
import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;

public class BoringCamera {

    private static final String TFOD_MODEL_ASSET = "RoverRuckus.tflite";
    private static final String LABEL_GOLD_MINERAL = "Gold Mineral";
    private static final String LABEL_SILVER_MINERAL = "Silver Mineral";
    private static final String VUFORIA_KEY = "ATMeJeb/////AAAAGaZ47DzTRUyOhcXnfJD+z89ATBWAF+fi+oOutLvXaf0YT/RPuf2mu6VJsJowCDiWiOzGMHUjXKsLBqA4Ziar76oZY/juheUactiQaY6Z3qPHnGmchAMlYuqgKErvggTuqmFca8VvTjtB6YOheJmAbllTDTaCudODpnIDkuFNTa36WCTr4L8HcCnIsB7bjF8pZoivYEBwPkfCVtfAiEpqxbyDAZgNXnuCyp6v/oi3FYZbp7JkFVorcM182+q0PVN5gIr14SKEMlDcDFDiv/sQwNeQOs5iNBd1OSkCoTe9CYbdmtE0gUXxKN2w9NqwATYC6YRJP9uoopxqmr9zkepI10peh2/RnU6pHOmR0KKRAVh8";
    private VuforiaLocalizer vuforia;
    private TFObjectDetector tfod;
    private Telemetry telemetry;
    private HardwareMap hardwareMap;
    //private List<Recognition> updatedRecognitions;
    private int goldPos = -3000;
    private int centerOfGold = 0;
    public BoringCamera(Telemetry t, HardwareMap hM)
    {
        telemetry = t;
        hardwareMap = hM;

        telemetry.addLine("BEFORE");
        telemetry.update();
        initVuforia();
        telemetry.addLine("AFTER");
        telemetry.update();
        //hardwareMap = hM;
        //updatedRecognitions = null;
        if (ClassFactory.getInstance().canCreateTFObjectDetector()) {
            initTfod();
        } else {
            telemetry.addData("Sorry!", "This device is not compatible with TFOD");
        }
        telemetry.addData("Camera Constructor: ", " Done");
    }
    public int getLocOfYellow()
    {
        //goldPos = -3000;//-1 = left, 0 = center, 1 = right, -3000 = not there
        if (tfod != null) {
          List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();
          if (updatedRecognitions != null) 
          {
            telemetry.addData("# Object Detected", updatedRecognitions.size());
            if (updatedRecognitions.size() == 3) {
              int goldMineralX = -1;
              int silverMineral1X = -1;
              int silverMineral2X = -1;
              for (Recognition recognition : updatedRecognitions) {
                if (recognition.getLabel().equals(LABEL_GOLD_MINERAL)) {
                  goldMineralX = (int) recognition.getLeft();
                  centerOfGold = xOfCenter((int) recognition.getLeft(),(int) recognition.getRight());
                } else if (silverMineral1X == -1) {
                  silverMineral1X = (int) recognition.getLeft();
                } else {
                  silverMineral2X = (int) recognition.getLeft();
                }
              }
              if (goldMineralX != -1 && silverMineral1X != -1 && silverMineral2X != -1) {
                if (goldMineralX < silverMineral1X && goldMineralX < silverMineral2X) {
                  telemetry.addData("Gold Mineral Position", "Left");
                  goldPos = -1;
                } 
                else if (goldMineralX > silverMineral1X && goldMineralX > silverMineral2X) {
                  goldPos = 1;
                  telemetry.addData("Gold Mineral Position", "Right");
                } 
                else {
                  goldPos = 0;
                  telemetry.addData("Gold Mineral Position", "Center");
                }
              }
            }
            else if(updatedRecognitions.size() == 2) {
              int goldMineralX = -1;
              int silverMineral1X = -1;
              int silverMineral2X = -1;
              for(Recognition recognition : updatedRecognitions) 
              {
                if(recognition.getLabel().equals(LABEL_GOLD_MINERAL)) { 
                  goldMineralX = (int) recognition.getLeft();
                  centerOfGold = xOfCenter((int) recognition.getLeft(),(int) recognition.getRight());
                }
                else if(silverMineral1X!=-1) {
                  silverMineral1X = (int) recognition.getLeft();
                }
                else {
                  silverMineral2X = (int) recognition.getLeft();
                }
              }
                if(goldMineralX!=-1 && silverMineral1X!=-1||goldMineralX!=-1 && silverMineral2X!=-1) {
                  if(goldMineralX < silverMineral1X||goldMineralX < silverMineral2X) {
                    goldPos = -1;
                    telemetry.addData("Gold Mineral Position " , "Left");
                  }
                  else {
                    goldPos = 1;
                    telemetry.addData("Gold Mineral Position ", "Right");
                  }
                }
                else //if(silverMineral1X != -1 && silverMineral2X != -1) 
                {
                  goldPos = -3000;
                    telemetry.addData("Gold Mineral Position ", "Not on screen");
                }
              
            }
            else if(updatedRecognitions.size() == 1) {
              int goldMineralX = -1;
              int silverMineralX = -1;
              for(Recognition recognition : updatedRecognitions) {
                if(recognition.getLabel().equals(LABEL_GOLD_MINERAL)) { 
                  goldMineralX = (int) recognition.getLeft();
                  centerOfGold = xOfCenter((int) recognition.getLeft(),(int) recognition.getRight());
                }
                else {
                  silverMineralX = (int) recognition.getLeft();
                }
              }
                if(goldMineralX!=-1) {
                  goldPos = 0;
                  telemetry.addData("Gold Mineral Position ", "Center");
                }
                else if(silverMineralX!=-1) {
                  goldPos = -3000;
                  telemetry.addData("Gold Mineral Position ","Not on screen");
                }
              
            }
            telemetry.update();
          }
        }
        return goldPos;
    }
    public boolean centerGold() {
      boolean output = false;
      //Width = 1280
      //height = 720
      int range = 75; // the range is doubl this number
      if(centerOfGold>=1280/2 - range && centerOfGold <= 1280/2 + range) {
        output = true;
      }
      return output;
    }
    public int xOfCenter(int shams, int faruuqe) {
      return faruuqe - ((faruuqe - shams)/2);
    }
    public int distBetween() {
      return centerOfGold - 1280/2;
    }
    public void activate()
    {
      if (tfod != null) 
      {
          tfod.activate();
      }
    }
    public void deactivate()
    {
      if (tfod != null) {
          tfod.shutdown();
      }
    }
    /**
     * Initialize the Vuforia localization engine.
     */
    private void initVuforia() {
        /*
         * Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
         */
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraDirection = CameraDirection.BACK;

        //  Instantiate the Vuforia engine
        vuforia = ClassFactory.getInstance().createVuforia(parameters);

        // Loading trackables is not necessary for the Tensor Flow Object Detection engine.
    }

    /**
     * Initialize the Tensor Flow Object Detection engine.
     */
    private void initTfod() {
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
            "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
            
            
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);
        tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABEL_GOLD_MINERAL, LABEL_SILVER_MINERAL);
    }

    
    
}
